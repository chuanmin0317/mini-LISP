Nonterminals useless in grammar

    EXP_LIST


Terminals unused in grammar

    INUMBER
    define
    ifop
    lambda
    '^'
    '['
    ']'


Rules useless in grammar

   47 EXP_LIST: EXP
   48         | EXP EXP_LIST


Grammar

    0 $accept: PROGRAM $end

    1 PROGRAM: STMT
    2        | STMT STMT_LIST

    3 STMT_LIST: STMT
    4          | STMT STMT_LIST

    5 STMT: EXP
    6     | PRINT-STMT

    7 PRINT-STMT: '(' printnum EXP ')'
    8           | '(' printbool EXP ')'

    9 EXP: boolval
   10    | number
   11    | VARIABLE
   12    | NUM-OP
   13    | LOGICAL-OP

   14 NUM-OP: PLUS
   15       | MINUS
   16       | MULTIPLY
   17       | DIVIDE
   18       | MODULUS
   19       | GREATER
   20       | SMALLER
   21       | EQUAL

   22 PLUS_LIST: EXP
   23          | EXP PLUS_LIST

   24 MULTIPLY_LIST: EXP
   25              | EXP MULTIPLY_LIST

   26 PLUS: '(' '+' EXP PLUS_LIST ')'

   27 MINUS: '(' '-' EXP EXP ')'

   28 MULTIPLY: '(' '*' EXP MULTIPLY_LIST ')'

   29 DIVIDE: '(' '/' EXP EXP ')'

   30 MODULUS: '(' mod EXP EXP ')'

   31 GREATER: '(' '>' EXP EXP ')'

   32 SMALLER: '(' '<' EXP EXP ')'

   33 EQUAL_LIST: EXP
   34           | EXP EQUAL_LIST

   35 EQUAL: '(' '=' EXP EQUAL_LIST ')'

   36 LOGICAL-OP: AND-OP
   37           | OR-OP
   38           | NOT-OP

   39 AND_LIST: EXP
   40         | EXP AND_LIST

   41 OR_LIST: EXP
   42        | EXP OR_LIST

   43 AND-OP: '(' andop EXP AND_LIST ')'

   44 OR-OP: '(' orop EXP OR_LIST ')'

   45 NOT-OP: '(' notop EXP EXP ')'

   46 VARIABLE: id


Terminals, with rules where they appear

    $end (0) 0
    '(' <ival> (40) 7 8 26 27 28 29 30 31 32 35 43 44 45
    ')' <ival> (41) 7 8 26 27 28 29 30 31 32 35 43 44 45
    '*' (42) 28
    '+' (43) 26
    '-' (45) 27
    '/' (47) 29
    '<' (60) 32
    '=' (61) 35
    '>' (62) 31
    '[' <ival> (91)
    ']' <ival> (93)
    '^' (94)
    error (256)
    INUMBER <var> (258)
    number <var> (259) 10
    id <var> (260) 46
    boolval <var> (261) 9
    andop <var> (262) 43
    define <var> (263)
    ifop <var> (264)
    lambda <var> (265)
    mod <var> (266) 30
    notop <var> (267) 45
    orop <var> (268) 44
    printnum <var> (269) 7
    printbool <var> (270) 8


Nonterminals, with rules where they appear

    $accept (28)
        on left: 0
    PROGRAM <var> (29)
        on left: 1 2
        on right: 0
    STMT_LIST (30)
        on left: 3 4
        on right: 2 4
    STMT <var> (31)
        on left: 5 6
        on right: 1 2 3 4
    PRINT-STMT <var> (32)
        on left: 7 8
        on right: 6
    EXP <var> (33)
        on left: 9 10 11 12 13
        on right: 5 7 8 22 23 24 25 26 27 28 29 30 31 32 33 34 35 39 40 41 42 43 44 45
    NUM-OP <var> (34)
        on left: 14 15 16 17 18 19 20 21
        on right: 12
    PLUS_LIST <var> (35)
        on left: 22 23
        on right: 23 26
    MULTIPLY_LIST <var> (36)
        on left: 24 25
        on right: 25 28
    PLUS <var> (37)
        on left: 26
        on right: 14
    MINUS <var> (38)
        on left: 27
        on right: 15
    MULTIPLY <var> (39)
        on left: 28
        on right: 16
    DIVIDE <var> (40)
        on left: 29
        on right: 17
    MODULUS <var> (41)
        on left: 30
        on right: 18
    GREATER <var> (42)
        on left: 31
        on right: 19
    SMALLER <var> (43)
        on left: 32
        on right: 20
    EQUAL_LIST <var> (44)
        on left: 33 34
        on right: 34 35
    EQUAL <var> (45)
        on left: 35
        on right: 21
    LOGICAL-OP <var> (46)
        on left: 36 37 38
        on right: 13
    AND_LIST <var> (47)
        on left: 39 40
        on right: 40 43
    OR_LIST <var> (48)
        on left: 41 42
        on right: 42 44
    AND-OP <var> (49)
        on left: 43
        on right: 36
    OR-OP <var> (50)
        on left: 44
        on right: 37
    NOT-OP <var> (51)
        on left: 45
        on right: 38
    VARIABLE <var> (52)
        on left: 46
        on right: 11


State 0

    0 $accept: • PROGRAM $end

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 4

    PROGRAM     go to state 5
    STMT        go to state 6
    PRINT-STMT  go to state 7
    EXP         go to state 8
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 1

   10 EXP: number •

    $default  reduce using rule 10 (EXP)


State 2

   46 VARIABLE: id •

    $default  reduce using rule 46 (VARIABLE)


State 3

    9 EXP: boolval •

    $default  reduce using rule 9 (EXP)


State 4

    7 PRINT-STMT: '(' • printnum EXP ')'
    8           | '(' • printbool EXP ')'
   26 PLUS: '(' • '+' EXP PLUS_LIST ')'
   27 MINUS: '(' • '-' EXP EXP ')'
   28 MULTIPLY: '(' • '*' EXP MULTIPLY_LIST ')'
   29 DIVIDE: '(' • '/' EXP EXP ')'
   30 MODULUS: '(' • mod EXP EXP ')'
   31 GREATER: '(' • '>' EXP EXP ')'
   32 SMALLER: '(' • '<' EXP EXP ')'
   35 EQUAL: '(' • '=' EXP EQUAL_LIST ')'
   43 AND-OP: '(' • andop EXP AND_LIST ')'
   44 OR-OP: '(' • orop EXP OR_LIST ')'
   45 NOT-OP: '(' • notop EXP EXP ')'

    andop      shift, and go to state 23
    mod        shift, and go to state 24
    notop      shift, and go to state 25
    orop       shift, and go to state 26
    printnum   shift, and go to state 27
    printbool  shift, and go to state 28
    '+'        shift, and go to state 29
    '-'        shift, and go to state 30
    '*'        shift, and go to state 31
    '/'        shift, and go to state 32
    '>'        shift, and go to state 33
    '<'        shift, and go to state 34
    '='        shift, and go to state 35


State 5

    0 $accept: PROGRAM • $end

    $end  shift, and go to state 36


State 6

    1 PROGRAM: STMT •
    2        | STMT • STMT_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 1 (PROGRAM)

    STMT_LIST   go to state 37
    STMT        go to state 38
    PRINT-STMT  go to state 7
    EXP         go to state 8
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 7

    6 STMT: PRINT-STMT •

    $default  reduce using rule 6 (STMT)


State 8

    5 STMT: EXP •

    $default  reduce using rule 5 (STMT)


State 9

   12 EXP: NUM-OP •

    $default  reduce using rule 12 (EXP)


State 10

   14 NUM-OP: PLUS •

    $default  reduce using rule 14 (NUM-OP)


State 11

   15 NUM-OP: MINUS •

    $default  reduce using rule 15 (NUM-OP)


State 12

   16 NUM-OP: MULTIPLY •

    $default  reduce using rule 16 (NUM-OP)


State 13

   17 NUM-OP: DIVIDE •

    $default  reduce using rule 17 (NUM-OP)


State 14

   18 NUM-OP: MODULUS •

    $default  reduce using rule 18 (NUM-OP)


State 15

   19 NUM-OP: GREATER •

    $default  reduce using rule 19 (NUM-OP)


State 16

   20 NUM-OP: SMALLER •

    $default  reduce using rule 20 (NUM-OP)


State 17

   21 NUM-OP: EQUAL •

    $default  reduce using rule 21 (NUM-OP)


State 18

   13 EXP: LOGICAL-OP •

    $default  reduce using rule 13 (EXP)


State 19

   36 LOGICAL-OP: AND-OP •

    $default  reduce using rule 36 (LOGICAL-OP)


State 20

   37 LOGICAL-OP: OR-OP •

    $default  reduce using rule 37 (LOGICAL-OP)


State 21

   38 LOGICAL-OP: NOT-OP •

    $default  reduce using rule 38 (LOGICAL-OP)


State 22

   11 EXP: VARIABLE •

    $default  reduce using rule 11 (EXP)


State 23

   43 AND-OP: '(' andop • EXP AND_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 40
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 24

   30 MODULUS: '(' mod • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 41
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 25

   45 NOT-OP: '(' notop • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 42
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 26

   44 OR-OP: '(' orop • EXP OR_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 43
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 27

    7 PRINT-STMT: '(' printnum • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 44
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 28

    8 PRINT-STMT: '(' printbool • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 45
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 29

   26 PLUS: '(' '+' • EXP PLUS_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 46
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 30

   27 MINUS: '(' '-' • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 47
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 31

   28 MULTIPLY: '(' '*' • EXP MULTIPLY_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 48
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 32

   29 DIVIDE: '(' '/' • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 49
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 33

   31 GREATER: '(' '>' • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 50
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 34

   32 SMALLER: '(' '<' • EXP EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 51
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 35

   35 EQUAL: '(' '=' • EXP EQUAL_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 52
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 36

    0 $accept: PROGRAM $end •

    $default  accept


State 37

    2 PROGRAM: STMT STMT_LIST •

    $default  reduce using rule 2 (PROGRAM)


State 38

    3 STMT_LIST: STMT •
    4          | STMT • STMT_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 4

    $default  reduce using rule 3 (STMT_LIST)

    STMT_LIST   go to state 53
    STMT        go to state 38
    PRINT-STMT  go to state 7
    EXP         go to state 8
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 39

   26 PLUS: '(' • '+' EXP PLUS_LIST ')'
   27 MINUS: '(' • '-' EXP EXP ')'
   28 MULTIPLY: '(' • '*' EXP MULTIPLY_LIST ')'
   29 DIVIDE: '(' • '/' EXP EXP ')'
   30 MODULUS: '(' • mod EXP EXP ')'
   31 GREATER: '(' • '>' EXP EXP ')'
   32 SMALLER: '(' • '<' EXP EXP ')'
   35 EQUAL: '(' • '=' EXP EQUAL_LIST ')'
   43 AND-OP: '(' • andop EXP AND_LIST ')'
   44 OR-OP: '(' • orop EXP OR_LIST ')'
   45 NOT-OP: '(' • notop EXP EXP ')'

    andop  shift, and go to state 23
    mod    shift, and go to state 24
    notop  shift, and go to state 25
    orop   shift, and go to state 26
    '+'    shift, and go to state 29
    '-'    shift, and go to state 30
    '*'    shift, and go to state 31
    '/'    shift, and go to state 32
    '>'    shift, and go to state 33
    '<'    shift, and go to state 34
    '='    shift, and go to state 35


State 40

   43 AND-OP: '(' andop EXP • AND_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 54
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND_LIST    go to state 55
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 41

   30 MODULUS: '(' mod EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 56
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 42

   45 NOT-OP: '(' notop EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 57
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 43

   44 OR-OP: '(' orop EXP • OR_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 58
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    OR_LIST     go to state 59
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 44

    7 PRINT-STMT: '(' printnum EXP • ')'

    ')'  shift, and go to state 60


State 45

    8 PRINT-STMT: '(' printbool EXP • ')'

    ')'  shift, and go to state 61


State 46

   26 PLUS: '(' '+' EXP • PLUS_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 62
    NUM-OP      go to state 9
    PLUS_LIST   go to state 63
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 47

   27 MINUS: '(' '-' EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 64
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 48

   28 MULTIPLY: '(' '*' EXP • MULTIPLY_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP            go to state 65
    NUM-OP         go to state 9
    MULTIPLY_LIST  go to state 66
    PLUS           go to state 10
    MINUS          go to state 11
    MULTIPLY       go to state 12
    DIVIDE         go to state 13
    MODULUS        go to state 14
    GREATER        go to state 15
    SMALLER        go to state 16
    EQUAL          go to state 17
    LOGICAL-OP     go to state 18
    AND-OP         go to state 19
    OR-OP          go to state 20
    NOT-OP         go to state 21
    VARIABLE       go to state 22


State 49

   29 DIVIDE: '(' '/' EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 67
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 50

   31 GREATER: '(' '>' EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 68
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 51

   32 SMALLER: '(' '<' EXP • EXP ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 69
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 52

   35 EQUAL: '(' '=' EXP • EQUAL_LIST ')'

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    EXP         go to state 70
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL_LIST  go to state 71
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 53

    4 STMT_LIST: STMT STMT_LIST •

    $default  reduce using rule 4 (STMT_LIST)


State 54

   39 AND_LIST: EXP •
   40         | EXP • AND_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    $default  reduce using rule 39 (AND_LIST)

    EXP         go to state 54
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND_LIST    go to state 72
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 55

   43 AND-OP: '(' andop EXP AND_LIST • ')'

    ')'  shift, and go to state 73


State 56

   30 MODULUS: '(' mod EXP EXP • ')'

    ')'  shift, and go to state 74


State 57

   45 NOT-OP: '(' notop EXP EXP • ')'

    ')'  shift, and go to state 75


State 58

   41 OR_LIST: EXP •
   42        | EXP • OR_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    $default  reduce using rule 41 (OR_LIST)

    EXP         go to state 58
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    OR_LIST     go to state 76
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 59

   44 OR-OP: '(' orop EXP OR_LIST • ')'

    ')'  shift, and go to state 77


State 60

    7 PRINT-STMT: '(' printnum EXP ')' •

    $default  reduce using rule 7 (PRINT-STMT)


State 61

    8 PRINT-STMT: '(' printbool EXP ')' •

    $default  reduce using rule 8 (PRINT-STMT)


State 62

   22 PLUS_LIST: EXP •
   23          | EXP • PLUS_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    $default  reduce using rule 22 (PLUS_LIST)

    EXP         go to state 62
    NUM-OP      go to state 9
    PLUS_LIST   go to state 78
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 63

   26 PLUS: '(' '+' EXP PLUS_LIST • ')'

    ')'  shift, and go to state 79


State 64

   27 MINUS: '(' '-' EXP EXP • ')'

    ')'  shift, and go to state 80


State 65

   24 MULTIPLY_LIST: EXP •
   25              | EXP • MULTIPLY_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    $default  reduce using rule 24 (MULTIPLY_LIST)

    EXP            go to state 65
    NUM-OP         go to state 9
    MULTIPLY_LIST  go to state 81
    PLUS           go to state 10
    MINUS          go to state 11
    MULTIPLY       go to state 12
    DIVIDE         go to state 13
    MODULUS        go to state 14
    GREATER        go to state 15
    SMALLER        go to state 16
    EQUAL          go to state 17
    LOGICAL-OP     go to state 18
    AND-OP         go to state 19
    OR-OP          go to state 20
    NOT-OP         go to state 21
    VARIABLE       go to state 22


State 66

   28 MULTIPLY: '(' '*' EXP MULTIPLY_LIST • ')'

    ')'  shift, and go to state 82


State 67

   29 DIVIDE: '(' '/' EXP EXP • ')'

    ')'  shift, and go to state 83


State 68

   31 GREATER: '(' '>' EXP EXP • ')'

    ')'  shift, and go to state 84


State 69

   32 SMALLER: '(' '<' EXP EXP • ')'

    ')'  shift, and go to state 85


State 70

   33 EQUAL_LIST: EXP •
   34           | EXP • EQUAL_LIST

    number   shift, and go to state 1
    id       shift, and go to state 2
    boolval  shift, and go to state 3
    '('      shift, and go to state 39

    $default  reduce using rule 33 (EQUAL_LIST)

    EXP         go to state 70
    NUM-OP      go to state 9
    PLUS        go to state 10
    MINUS       go to state 11
    MULTIPLY    go to state 12
    DIVIDE      go to state 13
    MODULUS     go to state 14
    GREATER     go to state 15
    SMALLER     go to state 16
    EQUAL_LIST  go to state 86
    EQUAL       go to state 17
    LOGICAL-OP  go to state 18
    AND-OP      go to state 19
    OR-OP       go to state 20
    NOT-OP      go to state 21
    VARIABLE    go to state 22


State 71

   35 EQUAL: '(' '=' EXP EQUAL_LIST • ')'

    ')'  shift, and go to state 87


State 72

   40 AND_LIST: EXP AND_LIST •

    $default  reduce using rule 40 (AND_LIST)


State 73

   43 AND-OP: '(' andop EXP AND_LIST ')' •

    $default  reduce using rule 43 (AND-OP)


State 74

   30 MODULUS: '(' mod EXP EXP ')' •

    $default  reduce using rule 30 (MODULUS)


State 75

   45 NOT-OP: '(' notop EXP EXP ')' •

    $default  reduce using rule 45 (NOT-OP)


State 76

   42 OR_LIST: EXP OR_LIST •

    $default  reduce using rule 42 (OR_LIST)


State 77

   44 OR-OP: '(' orop EXP OR_LIST ')' •

    $default  reduce using rule 44 (OR-OP)


State 78

   23 PLUS_LIST: EXP PLUS_LIST •

    $default  reduce using rule 23 (PLUS_LIST)


State 79

   26 PLUS: '(' '+' EXP PLUS_LIST ')' •

    $default  reduce using rule 26 (PLUS)


State 80

   27 MINUS: '(' '-' EXP EXP ')' •

    $default  reduce using rule 27 (MINUS)


State 81

   25 MULTIPLY_LIST: EXP MULTIPLY_LIST •

    $default  reduce using rule 25 (MULTIPLY_LIST)


State 82

   28 MULTIPLY: '(' '*' EXP MULTIPLY_LIST ')' •

    $default  reduce using rule 28 (MULTIPLY)


State 83

   29 DIVIDE: '(' '/' EXP EXP ')' •

    $default  reduce using rule 29 (DIVIDE)


State 84

   31 GREATER: '(' '>' EXP EXP ')' •

    $default  reduce using rule 31 (GREATER)


State 85

   32 SMALLER: '(' '<' EXP EXP ')' •

    $default  reduce using rule 32 (SMALLER)


State 86

   34 EQUAL_LIST: EXP EQUAL_LIST •

    $default  reduce using rule 34 (EQUAL_LIST)


State 87

   35 EQUAL: '(' '=' EXP EQUAL_LIST ')' •

    $default  reduce using rule 35 (EQUAL)
